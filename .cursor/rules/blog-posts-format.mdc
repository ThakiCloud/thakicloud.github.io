---
description: 
globs: 
alwaysApply: true
---
# 블로그 포스트 작성 자동화 가이드

## 1. 기본 원칙

- **내용이 매우 길어서 단락별로 나눠서 글을 작성해줘**
- **서브모듈로 테스트 했다면 서브 모듈은 글 작성 완료 후 삭제해줘**
- **최근 글 10개만 로컬 빌드 테스트**: `bundle exec jekyll build --verbose --trace --limit_posts 10`
- **news, career,research 카테고리는 코딩보다는 자연스러운 문장 형태의 글을 작성해줘**
- 블로그 글 작성시 먼저 영어로 작성 후 한국어, 아랍어는 영어를 자연스럽게 해당 언어 문화에 맞게 번역해서 3개의 글로 작성해줘.


## 2. 파일명 및 카테고리 규칙

### 파일명 형식
- TODAY=$(date +"%Y-%m-%d") 오늘 날짜 먼저 확인하고 파일 생성.
- 파일명에 반드시 언어(ko,en,ar)을 넣어서 파일명이 동일하지 않게 해줘. 
**필수**: `YYYY-MM-DD-title.md`

### 카테고리 분류
| 카테고리 | 설명 | 사용 예시 |
|---------|------|----------|
| `dev` | 개발 관련 내용 | 프로그래밍, 코딩 팁 |
| `llmops` | LLM 운영 및 관리 | AI 모델 배포, MLOps |
| `owm` | 오픈 워크플로우 관리 | 워크플로우 자동화 |
| `tutorials` | 실습 가이드 | 단계별 튜토리얼 |
| `news` | 기술 뉴스 | 업계 동향, 릴리즈 소식 |
| `research` | 연구 자료 | 논문 리뷰, 실험 결과 |
| `datasets` | 데이터셋 관련 | 데이터 분석, 처리 |
| `careers` | 커리어 | 취업, 이직, 성장 |
| `culture` | 개발 문화 | 팀워크, 방법론 |

## 3. Front Matter 템플릿

### 기본 템플릿
```yaml
---
title: "명확하고 구체적인 제목"
excerpt: "핵심 내용을 2-3문장으로 요약 (100-150자)"
seo_title: "SEO 최적화 제목 (60자 이내) - Thaki Cloud"
seo_description: "검색 의도를 반영한 상세 설명 (150-160자)"
date: YYYY-MM-DD
categories:
  - 주요카테고리
tags:
  - 핵심키워드1
  - 핵심키워드2
author_profile: true
toc: true
toc_label: "목차"
canonical_url: "https://thakicloud.github.io/카테고리/포스트-slug/"
---

⏱️ **예상 읽기 시간**: X분
```

### 다국어 포스트 템플릿
```yaml
# 한국어
---
title: "제목"
date: 2025-01-28
lang: ko
permalink: /ko/카테고리/포스트명/
canonical_url: "https://thakicloud.github.io/ko/카테고리/포스트명/"
---

# 영어
---
title: "Title"
date: 2025-01-28
lang: en
permalink: /en/category/post-name/
canonical_url: "https://thakicloud.github.io/en/category/post-name/"
---

# 아랍어
---
title: "العنوان"
date: 2025-01-28
lang: ar
permalink: /ar/category/post-name/
canonical_url: "https://thakicloud.github.io/ar/category/post-name/"
---
```

## 4. 카테고리별 특별 규칙

### Tutorials 카테고리
**macOS 실행 가능한 경우:**
- 테스트 스크립트 작성 필수
- 실제 실행 및 결과 포함
- 개발환경 버전 명시
- 필요시 zshrc alias 가이드 제공

**NVIDIA GPU 필요한 경우:**
- 테스트 생략, 이론적 설명만 작성
- GPU 요구사항 명시
- 대안 환경 제시

### Research 카테고리
- **코딩 글 작성 금지**: 실행 가능한 코드나 설치 가이드 포함 안 함
- **단락별 상세 분석**: 각 개념을 긴 문장으로 심도 있게 설명
- **수학적 공식 포함**: LaTeX 형태로 중요한 수식을 정리하고 해석
- **학술적 접근**: 논문의 이론적 배경과 기여도를 중심으로 분석

## 5. Jekyll Liquid 문법 오류 방지

### JavaScript/React 코드 처리
```jsx
// ❌ 문제가 되는 코드
<div style={{width: '67%'}} />

// ✅ 올바른 해결 방법
<div style={% raw %}{{width: '67%'}}{% endraw %} />
```

### YAML 설정 처리
```yaml
# ❌ 문제가 되는 경우
config:
  url: "{{ env.API_URL }}"

# ✅ raw 태그로 보호
{% raw %}
config:
  url: "{{ env.API_URL }}"
{% endraw %}
```

### 주의할 패턴
- `style={{...}}`, `className={{...}}`, `onClick={() => {...}}`
- `${변수명}`, `{{조건 ? 값1 : 값2}}`

## 6. LaTeX 수식 작성 규칙

### 기본 포맷
```markdown
# 블록 수식 (독립된 줄)
$$J(\theta) = \mathbb{E}_{x \sim D, y \sim \pi_\theta(y|x)}[R(x, y)]$$

# 인라인 수식 (문장 내)
여기서 $\theta$는 모델의 매개변수입니다.
```

### 자주 사용하는 기호
```latex
# 그리스 문자: $\alpha, \beta, \gamma, \theta, \lambda$
# 수학 연산자: $\sum, \prod, \int, \nabla, \partial$
# 확률/통계: $\mathbb{E}, \mathbb{P}, \sim, \propto$
# 집합/논리: $\in, \subset, \cup, \cap, \forall, \exists$
```

## 7. 자동화 스크립트 (필요시 생성)

### 환경 설정
```bash
export BLOG_DIR="./_posts"
export SCRIPTS_DIR="$HOME/scripts"
```

### 기본 포스트 생성 스크립트
```bash
#!/bin/bash
# 파일: ~/scripts/new-post.sh
TODAY=$(date +"%Y-%m-%d")
TITLE_SLUG=$1
CATEGORY=$2

# 사용법 체크 및 파일 생성 로직
```

### 다국어 포스트 생성 스크립트
```bash
#!/bin/bash
# 파일: ~/scripts/create-multilingual-post.sh
# 한국어/영어/아랍어 3개 언어 템플릿 동시 생성
```

### 유용한 Alias (필요시 추가)
```bash
# 기본 블로그 관련
alias newpost="$SCRIPTS_DIR/new-post.sh"
alias blogdir="cd $BLOG_DIR"

# 다국어 관련
alias newmultipost="$SCRIPTS_DIR/create-multilingual-post.sh"
alias checkurls="bundle exec jekyll doctor"
alias buildtest="JEKYLL_ENV=production bundle exec jekyll build --verbose --trace --limit_posts 10"

# Liquid 오류 체크
alias checkliquid="$SCRIPTS_DIR/check-liquid-errors.sh"
```

## 8. 통합 체크리스트

### 📝 글 작성 전 확인사항
- [ ] 오늘 날짜 확인: `date +"%Y-%m-%d"`
- [ ] 카테고리 선택 (9개 중 하나)
- [ ] 파일명 형식 준수: `YYYY-MM-DD-title.md`

### 📋 Front Matter 확인사항
- [ ] `title`: 명확하고 구체적인 제목
- [ ] `excerpt`: 100-150자 요약
- [ ] `seo_title`: 60자 이내 SEO 제목
- [ ] `seo_description`: 150-160자 SEO 설명
- [ ] `date`: 올바른 날짜 형식
- [ ] `categories`: 적절한 카테고리 설정
- [ ] `tags`: 관련 키워드 3-5개
- [ ] `canonical_url`: 올바른 URL 설정
- [ ] **다국어 포스트**: `lang`, `permalink` 설정

### 📖 본문 내용 확인사항
- [ ] 예상 읽기 시간 표시
- [ ] 목차 구조 (서론-본론-결론)
- [ ] **Tutorials**: macOS 실행 가능 시 테스트 스크립트 포함
- [ ] **Research**: 수학 공식 LaTeX 형태로 작성
- [ ] **JavaScript/React 코드**: `{% raw %}` 태그로 보호
- [ ] **YAML 설정**: Liquid 변수 `{% raw %}` 태그로 보호

### 🔍 Liquid 문법 확인사항
- [ ] `style={{}}` 패턴을 `{% raw %}` 태그로 감쌌는가?
- [ ] `{% raw %}` 태그 문법이 올바른가?
- [ ] YAML에서 `{{ }}` 변수를 보호했는가?
- [ ] 템플릿 리터럴 `${}` 처리했는가?

### 🧮 수식 확인사항 (Research 카테고리)
- [ ] 블록 수식: `$$` 사용
- [ ] 인라인 수식: `$` 사용
- [ ] 수식 앞뒤 빈 줄 포함
- [ ] 변수 설명 제공
- [ ] 수식 해석 (수학적/직관적/실무적 의미)

### 🌍 다국어 확인사항
- [ ] `permalink`: 언어별 고유 URL 설정
- [ ] `canonical_url`: 언어별 정규 URL
- [ ] `lang`: 언어 코드 (ko/en/ar)
- [ ] `title`, `excerpt`, `seo_*`: 언어별 번역
- [ ] `tags`, `toc_label`: 언어별 번역
- [ ] 본문 제목, 이미지 alt, 링크 텍스트 번역

## 9. 글 작성 후 필수 테스트 작업

### 1단계: 로컬 환경 설정 확인
```bash
# Ruby 환경 확인
gem install bundler
bundle install
```

### 2단계: Jekyll Doctor 실행
```bash
bundle exec jekyll doctor
```
**체크 항목:**
- 설정 파일 문법 오류
- 플러그인 호환성
- **다국어 포스트 URL 충돌** ⚠️
- 누락된 의존성

### 3단계: Liquid 오류 체크
```bash
# 개발 빌드로 Liquid 오류 확인
bundle exec jekyll build --verbose

# Liquid Warning 검색
bundle exec jekyll build 2>&1 | grep -i "liquid"
```

### 4단계: 프로덕션 빌드 테스트
```bash
# 최근 10개 포스트만 빌드
JEKYLL_ENV=production bundle exec jekyll build --verbose --trace --limit_posts 10
```

### 5단계: 마크다운 문법 검사 (선택사항)
```bash
markdownlint '_posts/**/*.md' '_pages/**/*.md' 'README.md' --config .markdownlint.json
```

### 6단계: 로컬 서버 테스트
```bash
# 로컬 서버 실행
bundle exec jekyll serve --verbose

# 브라우저에서 확인사항:
# - 포스트가 올바르게 렌더링되는가?
# - 수식이 정상적으로 표시되는가? (Research 카테고리)
# - 다국어 URL이 올바르게 작동하는가?
# - 이미지와 링크가 정상적으로 로드되는가?
```

### 7단계: 최종 확인 체크리스트
- [ ] Jekyll doctor 통과 ✅
- [ ] Liquid Warning 없음 ✅
- [ ] 프로덕션 빌드 성공 ✅
- [ ] 로컬 서버에서 정상 렌더링 ✅
- [ ] 다국어 URL 충돌 없음 ✅
- [ ] 수식 렌더링 정상 (해당시) ✅
- [ ] 이미지/링크 정상 작동 ✅
- [ ] 블로그 글 영어, 한국어, 아랍어 3개로 작성 유무 ✅

### 8단계: Git 커밋 전 최종 점검
```bash
# 변경사항 확인
git status
git diff

# 스테이징 및 커밋
git add .
git commit -m "feat: [카테고리] 포스트 제목 추가"
git push
```

## 10. 문제 해결 가이드

### URL 충돌 해결
다국어 포스트에서 URL 충돌 발생 시:
```yaml
# 각 포스트에 명시적 permalink 추가
permalink: /ko/카테고리/포스트명/  # 한국어
permalink: /en/category/post-name/  # 영어
permalink: /ar/category/post-name/  # 아랍어
```

### Liquid 오류 해결
1. JavaScript 스타일 객체를 `{% raw %}` 태그로 감싸기
2. `{% raw %}` 태그 문법 확인
3. YAML 설정의 Liquid 변수 보호

### 빌드 실패 해결
1. Jekyll doctor로 설정 오류 확인
2. Liquid Warning 검색 및 수정
3. 마크다운 문법 검사
4. 의존성 업데이트: `bundle update`

---

**💡 팁**: 이 체크리스트를 매 포스트 작성 시 단계별로 확인하세요!