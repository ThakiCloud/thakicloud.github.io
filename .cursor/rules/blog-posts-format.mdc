---
description: 
globs: 
alwaysApply: true
---
# 블로그 포스트 작성 자동화 가이드

## 1. 기본 설정

### 내용이 매우 길어서 단락별로 나눠서 글을 작성해줘.

### 날짜 확인 및 환경 설정
```bash
# 오늘 날짜 확인
date +"%Y-%m-%d"

# 블로그 작업 디렉토리 설정
export BLOG_DIR="./_posts"
export SCRIPTS_DIR="$HOME/scripts"
```

## 2. 파일명 규칙

**필수 형식**: `YYYY-MM-DD-title.md`

예시:
- `2025-06-28-ai-model-deployment-guide.md`
- `2025-06-28-docker-kubernetes-tutorial.md`

## 3. 카테고리 분류

반드시 다음 카테고리 중 하나 이상 포함:

| 카테고리 | 설명 | 사용 예시 |
|---------|------|----------|
| `dev` | 개발 관련 내용 | 프로그래밍, 코딩 팁 |
| `llmops` | LLM 운영 및 관리 | AI 모델 배포, MLOps |
| `owm` | 오픈 워크플로우 관리 | 워크플로우 자동화 |
| `tutorials` | 실습 가이드 | 단계별 튜토리얼 |
| `news` | 기술 뉴스 | 업계 동향, 릴리즈 소식 |
| `research` | 연구 자료 | 논문 리뷰, 실험 결과 |
| `datasets` | 데이터셋 관련 | 데이터 분석, 처리 |
| `careers` | 커리어 | 취업, 이직, 성장 |
| `culture` | 개발 문화 | 팀워크, 방법론 |

## 4. Tutorials 카테고리 특별 규칙

### 4.1 macOS 실행 가능한 경우
1. **테스트 스크립트 작성 필수**
2. **실제 실행 및 결과 포함**
3. **개발환경 버전 명시**
4. **zshrc alias 가이드 제공**

### 4.2 NVIDIA GPU 필요한 경우
- 테스트 생략, 이론적 설명만 작성
- GPU 요구사항 명시
- 대안 환경 제시

## 5. Front Matter 템플릿

```yaml
---
title: "명확하고 구체적인 제목"
excerpt: "핵심 내용을 2-3문장으로 요약 (100-150자)"
seo_title: "SEO 최적화 제목 (60자 이내) - Thaki Cloud"
seo_description: "검색 의도를 반영한 상세 설명 (150-160자)"
date: YYYY-MM-DD
last_modified_at: YYYY-MM-DD
categories:
  - 주요카테고리
  - 부카테고리
tags:
  - 핵심키워드1
  - 핵심키워드2
  - 기술스택
  - 브랜드명
  - 도구명
author_profile: true
toc: true
toc_label: "목차"
toc_icon: "cog"
toc_sticky: true
canonical_url: "https://thakicloud.github.io/카테고리/포스트-slug/"
reading_time: true
---

⏱️ **예상 읽기 시간**: X분
```

## 6. 자동화 스크립트

### 6.1 블로그 포스트 생성 스크립트
```bash
#!/bin/bash
# 파일: ~/scripts/new-post.sh

TODAY=$(date +"%Y-%m-%d")
TITLE_SLUG=$1
CATEGORY=$2

if [ -z "$TITLE_SLUG" ] || [ -z "$CATEGORY" ]; then
    echo "사용법: new-post <title-slug> <category>"
    echo "카테고리: dev, llmops, owm, tutorials, news, research, datasets, careers, culture"
    exit 1
fi

FILENAME="${TODAY}-${TITLE_SLUG}.md"
FILEPATH="${BLOG_DIR}/${FILENAME}"

# Front Matter 템플릿 생성
cat > "$FILEPATH" << EOF
---
title: ""
excerpt: ""
seo_title: " - Thaki Cloud"
seo_description: ""
date: ${TODAY}
categories:
  - ${CATEGORY}
tags:
  - 
author_profile: true
toc: true
toc_label: "목차"
canonical_url: "https://thakicloud.github.io/${CATEGORY}/${TITLE_SLUG}/"
---

⏱️ **예상 읽기 시간**: 분

## 서론

## 본론

## 결론
EOF

echo "블로그 포스트 생성됨: $FILEPATH"
```

### 6.2 읽기 시간 계산 스크립트
```bash
#!/bin/bash
# 파일: ~/scripts/calculate-reading-time.sh

FILE=$1
if [ -z "$FILE" ]; then
    echo "사용법: calculate-reading-time <markdown-file>"
    exit 1
fi

WORD_COUNT=$(wc -w < "$FILE")
READING_TIME=$((WORD_COUNT / 200)) # 분당 200단어 기준

if [ $READING_TIME -eq 0 ]; then
    READING_TIME=1
fi

echo "${READING_TIME}분"
```

## 7. zshrc Aliases

```bash
# ~/.zshrc에 추가
export BLOG_DIR="./_posts"
export SCRIPTS_DIR="$HOME/scripts"

# 블로그 관련 alias
alias newpost="$SCRIPTS_DIR/new-post.sh"
alias readtime="$SCRIPTS_DIR/calculate-reading-time.sh"
alias blogdir="cd $BLOG_DIR"
alias editpost="code $BLOG_DIR"

# 자주 사용하는 명령어 단축
alias ll="ls -la"
alias la="ls -A"
alias gst="git status"
alias gaa="git add ."
alias gcm="git commit -m"
alias gps="git push"
alias gpl="git pull"

# 개발환경 확인
alias pyver="python --version"
alias nodefer="node --version"
alias npmver="npm --version"
alias gitver="git --version"
```

## 8. 실행 가이드

### 8.1 초기 설정
```bash
# 스크립트 디렉토리 생성
mkdir -p ~/scripts

# 스크립트 파일들 생성 및 실행 권한 부여
chmod +x ~/scripts/*.sh

# zshrc 재로드
source ~/.zshrc
```

### 8.2 사용 예시
```bash
# 새 포스트 생성
newpost "docker-kubernetes-guide" "tutorials"

# 읽기 시간 계산
readtime ./_posts/2025-06-28-docker-kubernetes-guide.md

# 블로그 디렉토리로 이동
blogdir
```

## 9. 품질 체크리스트

### 필수 확인 사항
- [ ] 파일명이 `YYYY-MM-DD-title.md` 형식인가?
- [ ] 카테고리가 지정된 9개 중 하나인가?
- [ ] Front Matter가 완전한가?
- [ ] SEO 제목이 60자 이내인가?
- [ ] SEO 설명이 150-160자인가?
- [ ] 읽기 시간이 표시되어 있는가?

### Tutorials 카테고리 추가 확인
- [ ] macOS에서 실행 가능한가?
- [ ] 테스트 스크립트를 작성했는가?
- [ ] 실행 결과를 포함했는가?
- [ ] 개발환경 버전을 명시했는가?
- [ ] zshrc alias 가이드를 제공했는가?

## 10. 실제 글 완료 후에 로컬 테스트 해보고 문제 해결하기

### Ruby Gem & Bundler
```sh
gem install bundler
bundle install
```
---

### Jekyll Doctor (설정 점검)
```sh
bundle exec jekyll doctor
```

### Jekyll Build (프로덕션 빌드)
```sh
JEKYLL_ENV=production bundle exec jekyll build --verbose --trace
```
- 빌드 결과는 `_site/` 폴더에 생성됩니다.

---

### 마크다운 문법 검사 (Markdown Lint)

```sh
markdownlint '_posts/**/*.md' '_pages/**/*.md' 'README.md' --config .markdownlint.json
```
- `.markdownlint.json`이 없다면 워크플로우의 설정을 참고해 생성하세요.

---

